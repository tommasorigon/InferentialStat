# Scenario 1: matrice identità, p = 10, n = 200 -----------------------------------------------
p <- 10
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(10, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 3, iter = R)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma, digits = 2) # Verità
round(empirical_cov_estimate, digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate, digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Scenario 1: matrice identità, p = 10, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(10, 1))
# Scenario 1: matrice identità, p = 10, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(10, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Scenario 1: matrice identità, p = 10, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 3, iter = R)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma, digits = 2) # Verità
round(empirical_cov_estimate, digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate, digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
mcmc <- befa(X, Kmax = 5, iter = R)
# Scenario 1: matrice identità, p = 50, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 10, iter = R)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma, digits = 2) # Verità
round(empirical_cov_estimate, digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate, digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5],, digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5],, digits = 2) # Modello bayesiano
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Scenario 2 (K = 2), p = 10, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(10, 1))
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(p, 1))
tcrossprod(rnorm(p, 2))
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(p, 1))
# Simulazione dei dati
X <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
tcrossprod(rnorm(p, 2))
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
cov2cor(Sigma)
# Scenario 2 (K = 2), p = 10, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 10, iter = R)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
summary(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma, digits = 2) # Verità
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 10, iter = R)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
mcmc <- befa(X, Kmax = 30, iter = R)
mcmc <- befa(X, Kmax = 20, iter = R, Nid = 2)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
mcmc <- befa(X, Kmax = 3, iter = R, Nid = 2)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 2, iter = R, Nid = 2)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 2, iter = R, Nid = 1)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Scenario 2 (K = 2), p = 50, n = 200 -----------------------------------------------
p <- 10
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 2, iter = R, Nid = 1)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Scenario 2 (K = 2), p = 50, n = 200 -----------------------------------------------
p <- 10
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 2, iter = R, Nid = 3)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 10, iter = R, Nid = 3)
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 5, iter = R, Nid = 3)
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 4, iter = R)
# Scenario 2 (K = 2), p = 50, n = 200 -----------------------------------------------
p <- 100
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 4, iter = R)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
mcmc <- befa(X, Kmax = 4, iter = R, HW.prior = FALSE)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Stima tramite Gibbs-sampling
R <- 5000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 4, iter = R, HW.prior = FALSE)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
install.packages("ShrinkCovMat")
library(ShrinkCovMat)
shrinkcovmat.unequal(X)
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
shrinkcovmat.unequal(X)
X
cov(X)
shrinkcovmat.unequal(X)
? shrinkcovmat.unequal
install.packages("GGMncv")
library(GGMncv)
ledoit_wolf(X)
install.packages("nlshrink")
? nlshrink
ledoit_wolf(X)
# Ledoit & Wolf (2004)
lw_cov_estimate <- ledoit_wolf(X)
]? ledoit_wolf()
]? ledoit_wolf
? ledoit_wolf
# Ledoit & Wolf (2004)
lw_cov_estimate <- ledoit_wolf(X)
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
round(lw_cov_estimate[1:5, 1:5], digits = 2) # Ledoit & Wolf
sqrt(sum( (Sigma - lw_cov_estimate)^2))
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
sqrt(sum( (Sigma - lw_cov_estimate)^2))
# Librerie di riferimento
library(BayesFM)
library(mvtnorm)
library(GGMncv)
# Funzione principale; restituisce un array tutte le matrici di covarianza, per ciascuna iterazione MCMC
befa_cov <- function(mcmc) {
R <- nrow(mcmc$alpha)
M <- ncol(mcmc$alpha)
Kmax <- 0.5 * (sqrt(8 * ncol(mcmc$R) + 1) + 1) # Modo complicato per ri-ottenere Kmax da R; giuro che funziona
covs <- array(0, dim = c(R, M, M)) # Matrici di varianza / covarianza, output della funzione
for (r in 1:R) {
alphas <- matrix(0, nrow = M, ncol = Kmax) # Fattori latenti
for (j in 1:M) {
# Si noti che nel caso il fattore allocato sia 0, non viene effettuato nulla
alphas[j, mcmc$dedic[r, j]] <- mcmc$alpha[r, j]
}
R <- diag(Kmax)
R[upper.tri(R)] <- mcmc$R[r, ]
R[lower.tri(R)] <- mcmc$R[r, ]
sigmas <- mcmc$sigma[r, ]
covs[r, , ] <- alphas %*% R %*% t(alphas) + diag(sigmas)
}
covs
}
# Scenario 1: matrice identità (K = 0), p = 50, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 1000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 10, iter = R)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
# Scenario 2 (K = 2), p = 50, n = 200 -----------------------------------------------
p <- 100
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- tcrossprod(rnorm(p, 2)) + tcrossprod(rnorm(p, 2)) + diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 5000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 4, iter = R, HW.prior = FALSE)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
# Ledoit & Wolf (2004)
lw_cov_estimate <- ledoit_wolf(X)
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
round(lw_cov_estimate[1:5, 1:5], digits = 2) # Ledoit & Wolf
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
sqrt(sum( (Sigma - lw_cov_estimate)^2))
# Scenario 1: matrice identità (K = 0), p = 50, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(p, 1))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 5000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 4, iter = R, HW.prior = FALSE)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
# Ledoit & Wolf (2004)
lw_cov_estimate <- ledoit_wolf(X)
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
round(befa_cov_estimate[1:5, 1:5], digits = 2) # Modello bayesiano
round(lw_cov_estimate[1:5, 1:5], digits = 2) # Ledoit & Wolf
# Confronto tramite norma di Frobenius
sqrt(sum( (Sigma - empirical_cov_estimate)^2))
sqrt(sum( (Sigma - befa_cov_estimate)^2))
sqrt(sum( (Sigma - lw_cov_estimate)^2))
Sigma <- diag(rgamma(p, 0.1))
Sigma
rgamma(p, 0.1)
Sigma <- diag(rgamma(p, 10))
Sigma
# Scenario 1: matrice identità (K = 0), p = 50, n = 200 -----------------------------------------------
p <- 50
n <- 200
# Vera matrice di varianza / covarianza
set.seed(23)
Sigma <- diag(rgamma(p, 10))
# Simulazione dei dati
X <- rmvnorm(n = n, mean = rep(0, p), sigma = Sigma)
# Stima tramite Gibbs-sampling
R <- 5000 # Numbero di iterazioni MCMC
mcmc <- befa(X, Kmax = 4, iter = R, HW.prior = FALSE)
mcmc <- befa(X, Kmax = 10, iter = R, HW.prior = FALSE)
# Post-processing (probabilmente non necessario)
mcmc <- post.column.switch(mcmc)
mcmc <- post.sign.switch(mcmc)
# Matrice varianza/covarianza campionaria
empirical_cov_estimate <- cov(X)
# Stima tramite modello bayesiano
befa_cov_estimate <- apply(befa_cov(mcmc), c(2, 3), mean) # Media a posteriori - Si noti uso di apply per array
# Ledoit & Wolf (2004)
lw_cov_estimate <- ledoit_wolf(X)
round(Sigma[1:5, 1:5], digits = 2) # Verità
round(empirical_cov_estimate[1:5, 1:5], digits = 2) # Matrice covarianza empirica
install.packages("devtools")
devtools::install_github("https://github.com/MikeWolf007/covShrinkage")
? install_github
devtools::install_github("MikeWolf007/covShrinkage")
